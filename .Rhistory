type == "Relationship" & sub_type == "Jurisdiction" ~ jurisdiction_type,
TRUE ~ NA_character_
),
title = paste0(
"<b>", label, "</b><br>",
"Type: ", type, "<br>",
"Sub-type: ", sub_type, "<br>",
ifelse(!is.na(tooltip_extra), paste0("<br><b>Details:</b> ", tooltip_extra), "")
),
group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)
) %>%
select(id, label, group, title) %>%
distinct()
list(nodes = ego_nodes, edges = edge_df)
}
# ---- Extract and build Nadia 3-hop ego network ----
ego_data <- extract_ego_subgraph("Nadia Conti", hops = 3)
nodes <- ego_data$nodes
edges <- ego_data$edges
# Save for inspection or export
nadia_ego_nodes_2hop <- nodes
nadia_ego_edges_2hop <- edges
# ---- Build visNetwork ----
net <- visNetwork(nodes, edges, width = "100%", height = "600px") %>%
visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visNodes(font = list(
size = 14,
color = STYLES$node_label_dark,
face = STYLES$font_family,
vadjust = -15
))
# ---- Apply shape and color per group ----
for (group_name in names(node_legend_colors_plot)) {
net <- net %>% visGroups(
groupname = group_name,
color = node_legend_colors_plot[[group_name]],
shape = node_legend_shapes_plot[[group_name]]
)
}
# ---- Add legend ----
used_groups <- unique(nodes$group)
legend_df <- tibble::tibble(
label = used_groups,
shape = node_legend_shapes_plot[used_groups],
color = node_legend_colors_plot[used_groups]
) %>%
distinct(label, .keep_all = TRUE)
net <- net %>% visLegend(
addNodes = legend_df,
ncol = 2,
position = "left",
main = "Entity (Sub)Types",
useGroups = FALSE
)
# ---- Render ----
net
# Extract Nadia Conti's 2-hop ego network
g <- graph_from_data_frame(
d = mc3_edges_final %>% select(from = from_id, to = to_id),
vertices = mc3_nodes_final %>% select(id) %>% distinct() %>% rename(name = id),
directed = TRUE
)
ego_graph <- make_ego_graph(g, order = 3, nodes = "Nadia Conti", mode = "all")[[1]]
node_ids <- V(ego_graph)$name
edge_df <- as_data_frame(ego_graph, what = "edges")
nadia_ego_nodes_2hop <- mc3_nodes_final %>%
filter(id %in% node_ids) %>%
mutate(
label = ifelse(is.na(name), id, name),
tooltip_extra = case_when(
type == "Event" & sub_type == "Communication" ~ content,
type == "Event" & sub_type == "Monitoring" ~ findings,
type == "Event" & sub_type == "VesselMovement" ~ destination,
type == "Event" & sub_type == "Assessment" ~ results,
type == "Relationship" & sub_type == "Coordinates" ~ coordination_type,
type == "Relationship" & sub_type == "Operates" ~ operational_role,
type == "Relationship" & sub_type == "Jurisdiction" ~ jurisdiction_type,
TRUE ~ NA_character_
)
)
nadia_ego_edges_2hop <- edge_df %>%
left_join(nadia_ego_nodes_2hop %>% select(id, sender_name = label, sender_sub_type = sub_type), by = c("from" = "id")) %>%
left_join(nadia_ego_nodes_2hop %>% select(id, recipient_name = label, recipient_sub_type = sub_type), by = c("to" = "id"))
nadia_ego_comm_df <- edge_df %>%
left_join(nadia_ego_nodes_2hop %>% select(id, name, sub_type), by = c("from" = "id")) %>%
rename(
sender_id = from,
sender_name = name,
sender_type = sub_type
) %>%
left_join(nadia_ego_nodes_2hop %>% select(id, name, sub_type, content, findings, destination, results, coordination_type, operational_role, jurisdiction_type, timestamp),
by = c("to" = "id")) %>%
rename(
recipient_id = to,
recipient_name = name,
recipient_type = sub_type
) %>%
mutate(
details = coalesce(content, findings, destination, results, coordination_type, operational_role, jurisdiction_type),
timestamp = ymd_hms(timestamp)
) %>%
select(
sender_id, sender_name, sender_type,
recipient_id, recipient_name, recipient_type,
timestamp, details
)
# Print table of suspicious activities/ characters
suspicious_links <- nadia_ego_comm_df %>%
filter(
grepl("Suspicious", sender_type, ignore.case = TRUE) |
grepl("Suspicious", recipient_type, ignore.case = TRUE)
) %>%
select(
sender_id, sender_type,
recipient_id, recipient_type
)
print(suspicious_links)
# ---- Filter suspicious event communications with content ----
suspicious_event_data <- nadia_ego_nodes_3hop %>%
filter(
grepl("^Event_Communication_", id) & grepl("suspicious", id, ignore.case = TRUE)
) %>%
mutate(
wrapped_content = stringr::str_wrap(content, width = 80)
) %>%
select(Event_ID = id, Content = wrapped_content)
# ---- Print each suspicious event and its message ----
for (i in seq_len(nrow(suspicious_event_data))) {
eid <- suspicious_event_data$Event_ID[i]
content_text <- suspicious_event_data$Content[i]
cat("\n\n###", eid, "\n\n")
cat("```\n", content_text, "\n```\n")
}
knitr::kable(suspicious_event_data, format = "html")
# ---- Filter suspicious event communications with content ----
suspicious_event_data <- nadia_ego_nodes_3hop %>%
filter(
grepl("^Event_Communications_", id) & grepl("suspicious", id, ignore.case = TRUE)
) %>%
mutate(
wrapped_content = stringr::str_wrap(content, width = 80)
) %>%
select(Event_ID = id, Content = wrapped_content)
# ---- Print each suspicious event and its message ----
for (i in seq_len(nrow(suspicious_event_data))) {
eid <- suspicious_event_data$Event_ID[i]
content_text <- suspicious_event_data$Content[i]
cat("\n\n###", eid, "\n\n")
cat("```\n", content_text, "\n```\n")
}
knitr::kable(suspicious_event_data, format = "html")
# Filter for suspicious Event_Communication_* rows
suspicious_comms <- nadia_ego_comm_df_3hop %>%
filter(
grepl("^Event_Communication_", sender_id) &
grepl("suspicious", sender_id, ignore.case = TRUE)
) %>%
mutate(
wrapped_content = stringr::str_wrap(details, width = 80)
) %>%
select(Event_ID = sender_id, Date = timestamp,
Sender = sender_name, Recipient = recipient_name,
Content = wrapped_content)
# Print each event section by ID
if (nrow(suspicious_comms) > 0) {
for (i in seq_len(nrow(suspicious_comms))) {
eid <- suspicious_comms$Event_ID[i]
date <- suspicious_comms$Date[i]
from <- suspicious_comms$Sender[i]
to <- suspicious_comms$Recipient[i]
msg <- suspicious_comms$Content[i]
cat("\n\n###", eid, "\n\n")
cat("**Date:**", format(date, "%Y-%m-%d %H:%M:%S"), "<br>\n")
cat("**From:**", from, "<br>\n")
cat("**To:**", to, "<br><br>\n")
cat("```\n", msg, "\n```\n")
}
# Optional summary table
knitr::kable(suspicious_comms, format = "html", caption = "Suspicious Communication Events")
} else {
cat("No suspicious Event_Communication_* events found in nadia_ego_comm_df_3hop.")
}
# Filter for suspicious Event_Communication_* rows
suspicious_comms <- nadia_ego_comm_df_3hop %>%
filter(
grepl("^Event_Communications_", sender_id) &
grepl("suspicious", sender_id, ignore.case = TRUE)
) %>%
mutate(
wrapped_content = stringr::str_wrap(details, width = 80)
) %>%
select(Event_ID = sender_id, Date = timestamp,
Sender = sender_name, Recipient = recipient_name,
Content = wrapped_content)
# Print each event section by ID
if (nrow(suspicious_comms) > 0) {
for (i in seq_len(nrow(suspicious_comms))) {
eid <- suspicious_comms$Event_ID[i]
date <- suspicious_comms$Date[i]
from <- suspicious_comms$Sender[i]
to <- suspicious_comms$Recipient[i]
msg <- suspicious_comms$Content[i]
cat("\n\n###", eid, "\n\n")
cat("**Date:**", format(date, "%Y-%m-%d %H:%M:%S"), "<br>\n")
cat("**From:**", from, "<br>\n")
cat("**To:**", to, "<br><br>\n")
cat("```\n", msg, "\n```\n")
}
# Optional summary table
knitr::kable(suspicious_comms, format = "html", caption = "Suspicious Communication Events")
} else {
cat("No suspicious Event_Communication_* events found in nadia_ego_comm_df_3hop.")
}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
library(stringr)
library(ggplot2)
library(plotly)
library(hms)
library(tidyr)
# -- Step 1: Define keywords
keywords <- c("permit", "1045", "7844")
pattern <- paste0("\\b(", paste(keywords, collapse = "|"), ")\\b")
# -- Step 2: Filter messages
search_target_content <- tolower(other_communications_df$content)
keyword_matches_df <- other_communications_df %>%
filter(str_detect(search_target_content, pattern))
# -- Step 3: Extract keywords
plot_data <- keyword_matches_df %>%
mutate(matched_keywords = str_extract_all(tolower(content), pattern)) %>%
unnest(matched_keywords) %>%
mutate(matched_keywords = str_to_title(matched_keywords)) %>%
arrange(matched_keywords, timestamp) %>%
mutate(
timestamp = as.POSIXct(timestamp),
comm_date = as.Date(timestamp),
comm_time_of_day = hms::as_hms(format(timestamp, "%H:%M:%S")),
wrapped_content = str_wrap(content, width = 50),
tooltip_text = paste0(
"<b>Date:</b> ", comm_date,
"<br><b>Time:</b> ", comm_time_of_day,
"<br><b>Event ID:</b> ", event_id,
"<br><b>Content:</b><br>", wrapped_content
)
)
# -- Step 4: Plot
p <- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +
geom_point(aes(
color = matched_keywords,
shape = sender_sub_type,
text = tooltip_text,
group = matched_keywords  # ensures matched_keywords is in layer
), size = 2.5, alpha = 0.7, show.legend = TRUE) +
scale_shape_manual(values = c(
"Person" = 16,
"Vessel" = 17,
"Organization" = 15,
"Location" = 18
)) +
facet_wrap(~ matched_keywords, ncol = 1, scales = "fixed") +
scale_y_time(
limits = hms::as_hms(c("08:00:00", "13:00:00")),
breaks = hms::as_hms(c("08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00")),
labels = c("08:00", "09:00", "10:00", "11:00", "12:00", "13:00")
) +
scale_x_date(date_breaks = "1 day", date_labels = "%d %b") +
labs(
title = "Interactive Timeline: Keyword Mentions by Day and Time",
x = "Date",
y = "Time of Day",
shape = "Sender Type",
color = " "
) +
theme_grey() +
theme(
axis.text.y = element_text(size = 6),
axis.title.y = element_text(size = 7),
axis.ticks.y = element_line(),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.title.x = element_text(margin = margin(t = 10), size = 7),
panel.spacing = unit(0.5, "lines"),  # Applies to both x and y spacing
strip.text = element_text(size = 8, face = "bold"),
legend.position = "bottom",
legend.text = element_text(size = 6),
legend.title = element_blank()
)
# -- Step 5: Convert to plotly
ggplotly(p, tooltip = "text")
#| code-fold: true
#| code-summary: "Show the code"
# -- Step 1: Define keywords
keywords <- c("permit", "1045", "7844")
pattern <- paste0("\\b(", paste(keywords, collapse = "|"), ")\\b")
# -- Step 2: Filter messages with keyword match (case-insensitive)
keyword_matches_df <- other_communications_df %>%
mutate(content_lower = tolower(content)) %>%
filter(str_detect(content_lower, pattern))
# -- Step 3: Extract and annotate keyword matches
plot_data <- keyword_matches_df %>%
mutate(
matched_keywords = str_extract_all(content_lower, pattern),
timestamp = suppressWarnings(as.POSIXct(timestamp)),
comm_date = as.Date(timestamp),
comm_time_of_day = suppressWarnings(hms::as_hms(format(timestamp, "%H:%M:%S"))),
wrapped_content = str_wrap(content, width = 50)
) %>%
unnest(matched_keywords) %>%
mutate(
matched_keywords = str_to_title(matched_keywords),
tooltip_text = paste0(
"<b>Date:</b> ", comm_date,
"<br><b>Time:</b> ", format(comm_time_of_day, "%H:%M:%S"),
"<br><b>Event ID:</b> ", event_id,
"<br><b>Content:</b><br>", wrapped_content
)
)
# -- Step 4: Plot timeline
p <- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +
geom_point(aes(
color = matched_keywords,
shape = sender_sub_type,
text = tooltip_text,
group = matched_keywords
), size = 2.5, alpha = 0.7, show.legend = TRUE) +
scale_shape_manual(values = c(
"Person" = 16,
"Vessel" = 17,
"Organization" = 15,
"Location" = 18
)) +
facet_wrap(~ matched_keywords, ncol = 1, scales = "fixed") +
scale_y_time(
limits = hms::as_hms(c("08:00:00", "13:00:00")),
breaks = hms::as_hms(c("08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00")),
labels = c("08:00", "09:00", "10:00", "11:00", "12:00", "13:00")
) +
scale_x_date(date_breaks = "1 day", date_labels = "%d %b") +
labs(
title = "Interactive Timeline: Keyword Mentions by Day and Time",
x = "Date",
y = "Time of Day",
shape = "Sender Type",
color = "Keyword"
) +
theme_grey() +
theme(
axis.text.y = element_text(size = 6),
axis.title.y = element_text(size = 7),
axis.ticks.y = element_line(),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.title.x = element_text(margin = margin(t = 10), size = 7),
panel.spacing = unit(0.5, "lines"),
strip.text = element_text(size = 8, face = "bold"),
legend.position = "bottom",
legend.text = element_text(size = 6),
legend.title = element_blank()
)
# -- Step 5: Convert to plotly
ggplotly(p, tooltip = "text")
#| code-fold: true
#| code-summary: "Show the code"
# -- Step 1: Define keywords
keywords <- c("permit", "1045", "7844")
pattern <- paste0("\\b(", paste(keywords, collapse = "|"), ")\\b")
# -- Step 2: Filter messages with keyword match (case-insensitive)
keyword_matches_df <- other_communications_df %>%
mutate(content_lower = tolower(content)) %>%
filter(str_detect(content_lower, pattern))
# -- Step 3: Extract and annotate keyword matches
plot_data <- keyword_matches_df %>%
mutate(
matched_keywords = str_extract_all(content_lower, pattern),
timestamp = suppressWarnings(as.POSIXct(timestamp)),
comm_date = as.Date(timestamp),
comm_time_of_day = suppressWarnings(hms::as_hms(format(timestamp, "%H:%M:%S"))),
wrapped_content = str_wrap(content, width = 50)
) %>%
unnest(matched_keywords) %>%
mutate(
matched_keywords = recode(matched_keywords,
"permit" = "Permit",
"1045" = "Code 1045",
"7844" = "Code 7844"
),
tooltip_text = paste0(
"<b>Date:</b> ", comm_date,
"<br><b>Time:</b> ", format(comm_time_of_day, "%H:%M:%S"),
"<br><b>Event ID:</b> ", event_id,
"<br><b>Content:</b><br>", wrapped_content
)
)
# -- Step 4: Plot timeline
p <- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +
geom_point(aes(
color = matched_keywords,
shape = sender_sub_type,
text = tooltip_text,
group = matched_keywords
), size = 2.5, alpha = 0.7, show.legend = TRUE) +
scale_shape_manual(values = c(
"Person" = 16,
"Vessel" = 17,
"Organization" = 15,
"Location" = 18
)) +
facet_wrap(~ matched_keywords, ncol = 1, scales = "fixed") +
scale_y_time(
limits = hms::as_hms(c("08:00:00", "13:00:00")),
breaks = hms::as_hms(c("08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00")),
labels = c("08:00", "09:00", "10:00", "11:00", "12:00", "13:00")
) +
scale_x_date(date_breaks = "1 day", date_labels = "%d %b") +
labs(
title = "Interactive Timeline: Keyword Mentions by Day and Time",
x = "Date",
y = "Time of Day",
shape = "Sender Type",
color = "Keyword"
) +
theme_grey() +
theme(
axis.text.y = element_text(size = 6),
axis.title.y = element_text(size = 7),
axis.ticks.y = element_line(),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.title.x = element_text(margin = margin(t = 10), size = 7),
panel.spacing = unit(0.5, "lines"),
strip.text = element_text(size = 8, face = "bold"),
legend.position = "bottom",
legend.text = element_text(size = 6),
legend.title = element_blank()
)
# -- Step 5: Convert to plotly
ggplotly(p, tooltip = "text")
#| code-fold: true
#| code-summary: "Show the code"
# -- Step 1: Define keywords
keywords <- c("permit", "1045", "7844")
pattern <- paste0("\\b(", paste(keywords, collapse = "|"), ")\\b")
# -- Step 2: Filter messages with keyword match (case-insensitive)
keyword_matches_df <- other_communications_df %>%
mutate(content_lower = tolower(content)) %>%
filter(str_detect(content_lower, pattern))
# -- Step 3: Extract and annotate keyword matches
plot_data <- keyword_matches_df %>%
mutate(
matched_keywords = str_extract_all(content_lower, pattern),
timestamp = suppressWarnings(as.POSIXct(timestamp)),
comm_date = as.Date(timestamp),
comm_time_of_day = suppressWarnings(hms::as_hms(format(timestamp, "%H:%M:%S"))),
wrapped_content = str_wrap(content, width = 50)
) %>%
unnest(matched_keywords) %>%
mutate(
matched_keywords = recode(matched_keywords,
"permit" = "Permit",
"1045" = "# 1045",
"7844" = "# 7844"
),
tooltip_text = paste0(
"<b>Date:</b> ", comm_date,
"<br><b>Time:</b> ", format(comm_time_of_day, "%H:%M:%S"),
"<br><b>Event ID:</b> ", event_id,
"<br><b>Content:</b><br>", wrapped_content
)
)
# -- Step 4: Plot timeline
p <- ggplot(plot_data, aes(x = comm_date, y = comm_time_of_day)) +
geom_point(aes(
color = matched_keywords,
shape = sender_sub_type,
text = tooltip_text,
group = matched_keywords
), size = 2.5, alpha = 0.7, show.legend = TRUE) +
scale_shape_manual(values = c(
"Person" = 16,
"Vessel" = 17,
"Organization" = 15,
"Location" = 18
)) +
facet_wrap(~ matched_keywords, ncol = 1, scales = "fixed") +
scale_y_time(
limits = hms::as_hms(c("08:00:00", "13:00:00")),
breaks = hms::as_hms(c("08:00:00", "09:00:00", "10:00:00", "11:00:00", "12:00:00", "13:00:00")),
labels = c("08:00", "09:00", "10:00", "11:00", "12:00", "13:00")
) +
scale_x_date(date_breaks = "1 day", date_labels = "%d %b") +
labs(
title = "Interactive Timeline: Keyword Mentions by Day and Time",
x = "Date",
y = "Time of Day",
shape = "Sender Type",
color = "Keyword"
) +
theme_grey() +
theme(
axis.text.y = element_text(size = 6),
axis.title.y = element_text(size = 7),
axis.ticks.y = element_line(),
axis.text.x = element_text(size = 6, angle = 45, hjust = 1),
axis.title.x = element_text(margin = margin(t = 10), size = 7),
panel.spacing = unit(0.5, "lines"),
strip.text = element_text(size = 8, face = "bold"),
legend.position = "bottom",
legend.text = element_text(size = 6),
legend.title = element_blank()
)
# -- Step 5: Convert to plotly
ggplotly(p, tooltip = "text")
