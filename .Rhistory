# --- 5. Extract Nadia's Sent Communications ---
# Logic: Nadia (source) --sent--> Event_Communication (target) --received--> Recipient (target)
nadia_sent_communications <- mc3_edges_cleaned %>%
filter(from_id == nadia_id, edge_type == "sent") %>%
# Join with nodes to get content and timestamp of the Event_Communication node
left_join(mc3_nodes_cleaned %>% select(id, content, timestamp),
by = c("to_id" = "id")) %>%
rename(event_id = to_id, event_content = content, event_timestamp = timestamp) %>%
# Now, find the recipient of this communication event
left_join(mc3_edges_cleaned %>%
filter(edge_type == "received") %>%
select(event_id_match = from_id, recipient_id = to_id),
by = c("event_id" = "event_id_match")) %>%
# Join with nodes to get the recipient's name AND sub_type
left_join(mc3_nodes_cleaned %>% select(id, name, sub_type), # Select sub_type here
by = c("recipient_id" = "id")) %>%
rename(recipient_name = name, recipient_sub_type = sub_type) %>% # Rename sub_type
# Select and rename final columns for sent communications
select(
communication_type = edge_type, # This will be "sent"
sender_id = from_id,
recipient_id,
recipient_name,
recipient_sub_type, # Include in final select
event_id,
content = event_content,
timestamp = event_timestamp # Timestamp is still character here
) %>%
mutate(
sender_name = !!nadia_id, # Explicitly set sender_name to Nadia's ID/name using !!
sender_sub_type = !!nadia_sub_type # Assign Nadia's sub_type as a constant value using !!
)
print("--- Nadia's Sent Communications ---")
print(kable(head(nadia_sent_communications, 10), format = "markdown", align = "l"))
# --- 6. Extract Nadia's Received Communications ---
# Logic: Sender (source) --sent--> Event_Communication (target) --received--> Nadia (target)
nadia_received_communications <- mc3_edges_cleaned %>%
filter(to_id == nadia_id, edge_type == "received") %>%
# The source of this edge is the Event_Communication node
rename(event_id = from_id) %>%
# Join with nodes to get content and timestamp of the Event_Communication node
left_join(mc3_nodes_cleaned %>% select(id, content, timestamp),
by = c("event_id" = "id")) %>%
rename(event_content = content, event_timestamp = timestamp) %>%
# Now, find the original sender of this communication event
left_join(mc3_edges_cleaned %>%
filter(edge_type == "sent") %>%
select(event_id_match = to_id, sender_id = from_id),
by = c("event_id" = "event_id_match")) %>%
# Join with nodes to get the sender's name AND sub_type
left_join(mc3_nodes_cleaned %>% select(id, name, sub_type), # Select sub_type here
by = c("sender_id" = "id")) %>%
rename(sender_name = name, sender_sub_type = sub_type) %>% # Rename sub_type
# Select and rename final columns for received communications
select(
communication_type = edge_type, # This will be "received"
sender_id,
sender_name,
sender_sub_type, # Include in final select
recipient_id = to_id,
event_id,
content = event_content,
timestamp = event_timestamp
) %>%
mutate(
recipient_name = !!nadia_id, # Explicitly set recipient_name to Nadia's ID/name using !!
recipient_sub_type = !!nadia_sub_type # Assign Nadia's sub_type as a constant value using !!
)
print("--- Nadia's Received Communications ---")
print(kable(head(nadia_received_communications, 10), format = "markdown", align = "l"))
# --- 7. Combine Sent and Received Communications for Full Timeline ---
nadia_full_communications_timeline <- bind_rows(
nadia_sent_communications,
nadia_received_communications
) %>%
arrange(timestamp) %>%
# CRITICAL FIX: Explicitly convert timestamp to POSIXct after bind_rows
# Use as.POSIXct with the observed format string
mutate(timestamp = as.POSIXct(timestamp, format = "%Y-%m-%d %H:%M:%S")) %>%
# NEW: Create a sorted communicating pair for consistent coloring
rowwise() %>% # Process row by row
mutate(communicating_pair_sorted = paste(sort(c(sender_name, recipient_name)), collapse = "_")) %>%
ungroup() # Return to normal data frame operations
print("--- Nadia's Full Communication Timeline (Combined) ---")
print(kable(head(nadia_full_communications_timeline, 10), format = "markdown", align = "l"))
# --- 8. Prepare Data for Ego Network Visualization (Direct Person-to-Person/Entity) ---
# Build nodes and edges directly from nadia_full_communications_timeline,
# focusing on direct sender-recipient connections.
# Nodes for the ego network graph: Collect all unique sender and recipient IDs
all_ego_person_entity_ids <- nadia_full_communications_timeline %>%
select(id = sender_id) %>%
bind_rows(nadia_full_communications_timeline %>% select(id = recipient_id)) %>%
distinct(id) %>%
filter(!is.na(id)) # Ensure no NA IDs
# Filter mc3_nodes_cleaned to get attributes for these person/entity nodes
ego_nodes_for_graph <- mc3_nodes_cleaned %>%
filter(id %in% all_ego_person_entity_ids$id) %>%
filter(!is.na(id)) %>% # Ensure no NA IDs in nodes for graph
# Add attributes for visualization
mutate(
is_nadia = ifelse(id == nadia_id, TRUE, FALSE),
# Create a new column for legend grouping that includes Nadia as a distinct category
node_legend_group = ifelse(is_nadia, "Nadia Conti", sub_type),
node_size = ifelse(is_nadia, 20, 18), # Further increased node sizes: Nadia 20, others 10
display_name = ifelse(is_nadia, "Nadia Conti", name) # Use actual name for others
) %>%
filter(!is.na(sub_type)) # Ensure nodes have a sub_type for consistent plotting
# Calculate communication counts for each node for hover text
node_comm_summary <- nadia_full_communications_timeline %>%
group_by(id = sender_id) %>%
summarise(sent_count = n(), .groups = 'drop') %>%
full_join(nadia_full_communications_timeline %>%
group_by(id = recipient_id) %>%
summarise(received_count = n(), .groups = 'drop'),
by = "id") %>%
mutate(
sent_count = replace_na(sent_count, 0),
received_count = replace_na(received_count, 0)
)
# Join communication summary and create hover text for nodes
ego_nodes_for_graph <- ego_nodes_for_graph %>%
left_join(node_comm_summary, by = "id") %>%
mutate(
hover_text = paste(
"Name:", display_name, "<br>",
"Type:", node_legend_group, "<br>",
"Sent Communications:", sent_count, "<br>",
"Received Communications:", received_count
)
)
# Edges for the ego network graph: Direct Sender -> Recipient edges
# Aggregate to count occurrences for edge thickness
ego_edges_for_graph <- nadia_full_communications_timeline %>%
# Group by sender, recipient, their names, and communication type to count interactions
group_by(from = sender_id, to = recipient_id, sender_name, recipient_name, communication_type) %>%
summarise(
count_of_comm = n(), # Number of times this specific communication happened
content_sample = paste(head(content, 1), collapse = "; "), # Sample content
timestamp_min = min(timestamp, na.rm = TRUE),
timestamp_max = max(timestamp, na.rm = TRUE),
.groups = 'drop'
) %>%
# Add the 'nadia_role_in_comm' column for coloring based on Nadia's perspective
mutate(
nadia_role_in_comm = case_when(
from == nadia_id & communication_type == "sent" ~ "Nadia Sent",
to == nadia_id & communication_type == "received" ~ "Nadia Received",
TRUE ~ "Other Communication" # For communications not directly involving Nadia as sender/recipient
)
) %>%
# Ensure 'from' and 'to' are character and non-NA
mutate(
from = as.character(from),
to = as.character(to)
) %>%
filter(!is.na(from) & !is.na(to)) %>%
# Filter out edges where 'from' or 'to' IDs are NOT in the final ego_nodes_for_graph
filter(from %in% ego_nodes_for_graph$id, to %in% ego_nodes_for_graph$id) %>%
# Create hover text for edges
mutate(
hover_text = paste(
"From:", sender_name, "<br>",
"To:", recipient_name, "<br>",
"Type:", communication_type, "<br>",
"Count:", count_of_comm, "<br>",
"First:", format(timestamp_min, "%Y-%m-%d %H:%M:%S"), "<br>",
"Last:", format(timestamp_max, "%Y-%m-%d %H:%M:%S"), "<br>",
"Content Sample:", content_sample
)
)
# Create the tbl_graph object for the ego network
nadia_ego_network_graph <- tbl_graph(nodes = ego_nodes_for_graph, edges = ego_edges_for_graph, directed = TRUE)
print("--- Checking: Number of nodes and edges in Nadia's Ego Network Graph ---")
print(paste("Nodes:", gorder(nadia_ego_network_graph), "Edges:", gsize(nadia_ego_network_graph)))
print("---------------------------------------------------------------------")
# Define custom colors for node types (reusing from previous code)
node_legend_colors_plot <- c(
"Person" = "#88CCEE",      # Blue
"Vessel" = "#D55E00",      # Orange
"Organization" = "#117733", # Green
"Location" = "#AA4499",   # Purple
"Nadia Conti" = "red"      # Special color for Nadia
)
# Define custom shapes for node subtypes
node_legend_shapes_plot <- c(
"Person" = "dot",        # Circle for visNetwork
"Vessel" = "triangle",
"Organization" = "square",
"Location" = "diamond",
"Nadia Conti" = "star"   # Star shape for Nadia in visNetwork
)
# Separate the edges into two sets: Nadia Sent and Nadia Received
edges_sent <- ego_edges_for_graph %>%
filter(nadia_role_in_comm == "Nadia Sent")
edges_received <- ego_edges_for_graph %>%
filter(nadia_role_in_comm == "Nadia Received")
# Function to build visNetwork plot for a given edge set
build_visnetwork_plot <- function(edge_df, title_label) {
# Prepare nodes from edge list
node_ids <- unique(c(edge_df$from, edge_df$to))
nodes <- ego_nodes_for_graph %>%
filter(id %in% node_ids) %>%
mutate(
label = ifelse(display_name == "Nadia Conti", "", display_name),
title = paste0(
"<b>", display_name, "</b><br>",
"Type: ", node_legend_group, "<br>",
"Sent: ", sent_count, "<br>",
"Received: ", received_count
),
group = ifelse(display_name == "Nadia Conti", "Nadia Conti", node_legend_group)
) %>%
select(id, label, title, group, value = node_size)
# Prepare edges with arrow and tooltip
edges <- edge_df %>%
filter(!is.na(from) & !is.na(to)) %>%
mutate(
arrows = "to",
title = paste0(
"<b>From:</b> ", sender_name, "<br>",
"<b>To:</b> ", recipient_name, "<br>",
"<b>Type:</b> ", communication_type, "<br>",
"<b>Count:</b> ", count_of_comm, "<br>",
"<b>First:</b> ", format(timestamp_min, "%Y-%m-%d %H:%M:%S"), "<br>",
"<b>Last:</b> ", format(timestamp_max, "%Y-%m-%d %H:%M:%S"), "<br>",
"<b>Content Sample:</b><br><div style='max-width:300px;white-space:normal;'>", content_sample, "</div>"
)
) %>%
select(from, to, arrows, title, width = count_of_comm)
# Create visNetwork
visNetwork(nodes, edges, width = "100%", height = "600px") %>%
visEdges(smooth = FALSE, arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visNodes(font = list(size = 14)) %>%
visGroups(groupname = "Person", color = node_legend_colors_plot[["Person"]], shape = node_legend_shapes_plot[["Person"]]) %>%
visGroups(groupname = "Vessel", color = node_legend_colors_plot[["Vessel"]], shape = node_legend_shapes_plot[["Vessel"]]) %>%
visGroups(groupname = "Organization", color = node_legend_colors_plot[["Organization"]], shape = node_legend_shapes_plot[["Organization"]]) %>%
visGroups(groupname = "Location", color = node_legend_colors_plot[["Location"]], shape = node_legend_shapes_plot[["Location"]]) %>%
visGroups(groupname = "Nadia Conti", color = node_legend_colors_plot[["Nadia Conti"]], shape = node_legend_shapes_plot[["Nadia Conti"]]) %>%
visLegend(
addNodes = legend_df,
ncol = 2,
position = "left",
main = "Entity (Sub)Types",
useGroups = FALSE) %>%
visLayout(randomSeed = 123) %>%
visNetwork::visExport() %>%
visNetwork::visPhysics(enabled = TRUE) %>%
visNetwork::visInteraction(navigationButtons = TRUE) %>%
visNetwork::visEvents(stabilizationIterationsDone = "function () {this.setOptions({physics:false});}")
}
# Build and show visNetwork plots
build_visnetwork_plot(edges_sent, "Nadia Sent Ego Network")
#| code-fold: true
#| code-summary: "Show the code"
# Define custom colors for node types (reusing from previous code)
node_legend_colors_plot <- c(
"Person" = "#88CCEE",      # Blue
"Vessel" = "#D55E00",      # Orange
"Organization" = "#117733", # Green
"Location" = "#AA4499",   # Purple
"Nadia Conti" = "red"      # Special color for Nadia
)
# Define custom shapes for node subtypes
node_legend_shapes_plot <- c(
"Person" = "dot",        # Circle for visNetwork
"Vessel" = "triangle",
"Organization" = "square",
"Location" = "diamond",
"Nadia Conti" = "star"   # Star shape for Nadia in visNetwork
)
# Separate the edges into two sets: Nadia Sent and Nadia Received
edges_sent <- ego_edges_for_graph %>%
filter(nadia_role_in_comm == "Nadia Sent")
edges_received <- ego_edges_for_graph %>%
filter(nadia_role_in_comm == "Nadia Received")
# Function to build visNetwork plot for a given edge set
build_visnetwork_plot <- function(edge_df, title_label) {
# Prepare nodes from edge list
node_ids <- unique(c(edge_df$from, edge_df$to))
nodes <- ego_nodes_for_graph %>%
filter(id %in% node_ids) %>%
mutate(
label = ifelse(display_name == "Nadia Conti", "", display_name),
title = paste0(
"<b>", display_name, "</b><br>",
"Type: ", node_legend_group, "<br>",
"Sent: ", sent_count, "<br>",
"Received: ", received_count
),
group = ifelse(display_name == "Nadia Conti", "Nadia Conti", node_legend_group)
) %>%
select(id, label, title, group, value = node_size)
# Prepare edges with arrow and tooltip
edges <- edge_df %>%
filter(!is.na(from) & !is.na(to)) %>%
mutate(
arrows = "to",
title = paste0(
"<b>From:</b> ", sender_name, "<br>",
"<b>To:</b> ", recipient_name, "<br>",
"<b>Type:</b> ", communication_type, "<br>",
"<b>Count:</b> ", count_of_comm, "<br>",
"<b>First:</b> ", format(timestamp_min, "%Y-%m-%d %H:%M:%S"), "<br>",
"<b>Last:</b> ", format(timestamp_max, "%Y-%m-%d %H:%M:%S"), "<br>",
"<b>Content Sample:</b><br><div style='max-width:300px;white-space:normal;'>", content_sample, "</div>"
)
) %>%
select(from, to, arrows, title, width = count_of_comm)
# Create visNetwork
visNetwork(nodes, edges, width = "100%", height = "600px") %>%
visEdges(smooth = FALSE, arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visNodes(font = list(size = 14)) %>%
visGroups(groupname = "Person", color = node_legend_colors_plot[["Person"]], shape = node_legend_shapes_plot[["Person"]]) %>%
visGroups(groupname = "Vessel", color = node_legend_colors_plot[["Vessel"]], shape = node_legend_shapes_plot[["Vessel"]]) %>%
visGroups(groupname = "Organization", color = node_legend_colors_plot[["Organization"]], shape = node_legend_shapes_plot[["Organization"]]) %>%
visGroups(groupname = "Location", color = node_legend_colors_plot[["Location"]], shape = node_legend_shapes_plot[["Location"]]) %>%
visGroups(groupname = "Nadia Conti", color = node_legend_colors_plot[["Nadia Conti"]], shape = node_legend_shapes_plot[["Nadia Conti"]]) %>%
visLegend(
addNodes = legend_df,
ncol = 2,
position = "left",
main = "Entity (Sub)Types",
useGroups = FALSE) %>%
visLayout(randomSeed = 123) %>%
visNetwork::visExport() %>%
visNetwork::visPhysics(enabled = TRUE) %>%
visNetwork::visInteraction(navigationButtons = TRUE) %>%
visNetwork::visEvents(stabilizationIterationsDone = "function () {this.setOptions({physics:false});}")
}
# Build and show visNetwork plots
build_visnetwork_plot(edges_sent, "Nadia Sent Ego Network")
build_visnetwork_plot(edges_received, "Nadia Received Ego Network")
#| code-fold: true
#| code-summary: "Show the code"
build_visnetwork_plot(edges_received, "Nadia Received Ego Network")
# ---- 1. Define styles and legends ----
library(igraph)
event_subtypes <- c(
"Communication", "Monitoring", "VesselMovement", "Assessment",
"Collaborate", "Endorsement", "TourActivity", "TransponderPing",
"Harbor Report", "Fishing", "Criticize"
)
relationship_subtypes <- c(
"Coordinates", "AccessPermission", "Operates", "Colleagues",
"Suspicious", "Reports", "Jurisdiction", "Unfriendly", "Friends"
)
node_legend_colors_plot <- c(
"Person" = "#88CCEE",
"Vessel" = "#D55E00",
"Organization" = "#117733",
"Location" = "#AA4499",
"Group"= "#CC79A7",
"Event" = "#DDCC77",
"Relationship" = "#AF8DC3"
)
node_legend_shapes_plot <- c(
"Person" = "dot",
"Vessel" = "triangle",
"Organization" = "square",
"Location" = "diamond",
"Group" = "circle plus",
"Event" = "star",
"Relationship" = "square x"
)
STYLES <- list(
node_label_dark = "black",
font_family = "Roboto Condensed"
)
# ---- Define ego extraction function ----
extract_ego_subgraph <- function(center_node = "Nadia Conti", hops = 2) {
g <- graph_from_data_frame(
d = mc3_edges_final %>% select(from = from_id, to = to_id),
vertices = mc3_nodes_final %>% select(id) %>% distinct() %>% rename(name = id),
directed = TRUE
)
ego_graph <- make_ego_graph(g, order = hops, nodes = center_node, mode = "all")[[1]]
node_ids <- V(ego_graph)$name
edge_df <- as_data_frame(ego_graph, what = "edges")
ego_nodes <- mc3_nodes_final %>%
filter(id %in% node_ids) %>%
mutate(
label = ifelse(is.na(name), id, name),
tooltip_extra = case_when(
type == "Event" & sub_type == "Communication" ~ content,
type == "Event" & sub_type == "Monitoring" ~ findings,
type == "Event" & sub_type == "VesselMovement" ~ destination,
type == "Event" & sub_type == "Assessment" ~ results,
type == "Relationship" & sub_type == "Coordinates" ~ coordination_type,
type == "Relationship" & sub_type == "Operates" ~ operational_role,
type == "Relationship" & sub_type == "Jurisdiction" ~ jurisdiction_type,
TRUE ~ NA_character_
),
title = paste0(
"<b>", label, "</b><br>",
"Type: ", type, "<br>",
"Sub-type: ", sub_type, "<br>",
ifelse(!is.na(tooltip_extra), paste0("<br><b>Details:</b> ", tooltip_extra), "")
),
group = ifelse(sub_type %in% names(node_legend_colors_plot), sub_type, type)
) %>%
select(id, label, group, title) %>%
distinct()
list(nodes = ego_nodes, edges = edge_df)
}
# ---- Extract and build Nadia 3-hop ego network ----
ego_data <- extract_ego_subgraph("Nadia Conti", hops = 3)
nodes <- ego_data$nodes
edges <- ego_data$edges
# Save for inspection or export
nadia_ego_nodes_2hop <- nodes
nadia_ego_edges_2hop <- edges
# ---- Build visNetwork ----
net <- visNetwork(nodes, edges, width = "100%", height = "600px") %>%
visEdges(arrows = list(to = list(enabled = TRUE, scaleFactor = 1.5))) %>%
visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %>%
visIgraphLayout(layout = "layout_with_fr") %>%
visNodes(font = list(
size = 14,
color = STYLES$node_label_dark,
face = STYLES$font_family,
vadjust = -15
))
# ---- Apply shape and color per group ----
for (group_name in names(node_legend_colors_plot)) {
net <- net %>% visGroups(
groupname = group_name,
color = node_legend_colors_plot[[group_name]],
shape = node_legend_shapes_plot[[group_name]]
)
}
# ---- Add legend ----
used_groups <- unique(nodes$group)
legend_df <- tibble::tibble(
label = used_groups,
shape = node_legend_shapes_plot[used_groups],
color = node_legend_colors_plot[used_groups]
) %>%
distinct(label, .keep_all = TRUE)
net <- net %>% visLegend(
addNodes = legend_df,
ncol = 2,
position = "left",
main = "Entity (Sub)Types",
useGroups = FALSE
)
# ---- Render ----
net
# Extract Nadia Conti's 2-hop ego network
g <- graph_from_data_frame(
d = mc3_edges_final %>% select(from = from_id, to = to_id),
vertices = mc3_nodes_final %>% select(id) %>% distinct() %>% rename(name = id),
directed = TRUE
)
ego_graph <- make_ego_graph(g, order = 3, nodes = "Nadia Conti", mode = "all")[[1]]
node_ids <- V(ego_graph)$name
edge_df <- as_data_frame(ego_graph, what = "edges")
nadia_ego_nodes_2hop <- mc3_nodes_final %>%
filter(id %in% node_ids) %>%
mutate(
label = ifelse(is.na(name), id, name),
tooltip_extra = case_when(
type == "Event" & sub_type == "Communication" ~ content,
type == "Event" & sub_type == "Monitoring" ~ findings,
type == "Event" & sub_type == "VesselMovement" ~ destination,
type == "Event" & sub_type == "Assessment" ~ results,
type == "Relationship" & sub_type == "Coordinates" ~ coordination_type,
type == "Relationship" & sub_type == "Operates" ~ operational_role,
type == "Relationship" & sub_type == "Jurisdiction" ~ jurisdiction_type,
TRUE ~ NA_character_
)
)
nadia_ego_edges_2hop <- edge_df %>%
left_join(nadia_ego_nodes_2hop %>% select(id, sender_name = label, sender_sub_type = sub_type), by = c("from" = "id")) %>%
left_join(nadia_ego_nodes_2hop %>% select(id, recipient_name = label, recipient_sub_type = sub_type), by = c("to" = "id"))
nadia_ego_comm_df <- edge_df %>%
left_join(nadia_ego_nodes_2hop %>% select(id, name, sub_type), by = c("from" = "id")) %>%
rename(
sender_id = from,
sender_name = name,
sender_type = sub_type
) %>%
left_join(nadia_ego_nodes_2hop %>% select(id, name, sub_type, content, findings, destination, results, coordination_type, operational_role, jurisdiction_type, timestamp),
by = c("to" = "id")) %>%
rename(
recipient_id = to,
recipient_name = name,
recipient_type = sub_type
) %>%
mutate(
details = coalesce(content, findings, destination, results, coordination_type, operational_role, jurisdiction_type),
timestamp = ymd_hms(timestamp)
) %>%
select(
sender_id, sender_name, sender_type,
recipient_id, recipient_name, recipient_type,
timestamp, details
)
# Print table of suspicious activities/ characters
suspicious_links <- nadia_ego_comm_df %>%
filter(
grepl("Suspicious", sender_type, ignore.case = TRUE) |
grepl("Suspicious", recipient_type, ignore.case = TRUE)
) %>%
select(
sender_id, sender_type,
recipient_id, recipient_type
)
print(suspicious_links)
